{
    "swagger": "2.0",
    "info": {
        "title": "GLobal Forest Watch API",
        "description": "The Global Forest Watch API is currently in beta. Based on feedback from trusted testers, this document specifies new API changes that are currently under development. Interested in being a trusted tester? Contact the [Data Lab](mailTo:support@wri.com) at World Resources Institute.\n\nAll endpoints are accessible via http & https and are located at\n`https://production-api.globalforestwatch.org`.\n\nForest change measures tree cover loss, tree cover gain, or forest disturbance. The following forest change data are available through the API: \n* University of Maryland tree cover loss & gain \n* FORMA alerts\n* IMAZON SAD alerts\n* Terrai alerts\n* Prodes\n* Guira Loss\n* Biomass loss\n* GLAD tree cover loss alerts \n* NASA VIIRs active fires.\n\nOther services provided by the Api complements the ecosystem that surrounds the platform:\n\n* Metadata\n* Urthecast \n* Geostore\n* OGR \n* Story \n* User \n* subscription\n\n\n### Story API\nThis Microservice will provide a comprehensive way of consume, create, modify or delete users stories within the platform\n",
        "termsOfService": "http://www.globalforestwatch.org/terms",
        "contact": {
            "name": "API Support",
            "url": "http://www.globalforestwatch.org",
            "email": "support@wri.com"
        },
        "license": {
            "name": "MIT License (MIT)",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0.0"
    },
    "host": "staging-api.globalforestwatch.org",
    "schemes": [
        "https",
        "http"
    ],
    "consumes": [
        "application/vnd.api+json"
    ],
    "produces": [
        "application/vnd.api+json"
    ],
    "paths": {
        "/story": {
            "get": {
                "summary": "Obtain all stories",
                "description": "Obtain all stories\n### Example response\n```json\n{\n  \"data\": [{\n      \"type\": \"story\",\n      \"id\": \"84\",\n      \"attributes\": {\n          \"name\": null,\n          \"title\": \"Title\",\n          \"createdAt\": \"2016-08-01T09:02:07Z\",\n          \"visible\": false,\n          \"details\": null,\n          \"date\": \"2016-08-01T00:00:00Z\",\n          \"email\": \"vizz@vizzuality.com\",\n          \"location\": null,\n          \"userId\": \"573c9295aafb8d010001745b\",\n          \"media\": [],\n          \"lat\": -1.07437329723863,\n          \"lng\": 1.98413085937498\n      }\n  }]\n}\n```\n",
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "STORY"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields to serialize (sepparated by comma) of the story (?fields=name,title)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "operationId": "getStories",
                "responses": {
                    "200": {
                        "description": "The all stories",
                        "schema": {
                            "$ref": "#/definitions/StoryAPI"
                        }
                    },
                    "400": {
                        "description": "Validate error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    }
                }
            }
        },
        "/story/{id}": {
            "get": {
                "description": "Returns story based on a single ID, if the story not exist return 404\n### Example URL request\n```\n{{host}}/story/23\n```\n### Example response\n```json\n{\n  \"data\": [{\n      \"type\": \"story\",\n      \"id\": \"23\",\n      \"attributes\": {\n          \"name\": null,\n          \"title\": \"Title\",\n          \"createdAt\": \"2016-08-01T09:02:07Z\",\n          \"visible\": false,\n          \"details\": null,\n          \"date\": \"2016-08-01T00:00:00Z\",\n          \"email\": \"vizz@vizzuality.com\",\n          \"location\": null,\n          \"userId\": \"573c9295aafb8d010001745b\",\n          \"media\": [],\n          \"lat\": -1.07437329723863,\n          \"lng\": 1.98413085937498\n      }\n  }]\n}\n```\n",
                "operationId": "getStoryById",
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "STORY"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "ID of story to fetch",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields to serialize (sepparated by comma) of the story (?fields=name,title)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Story obtained",
                        "schema": {
                            "$ref": "#/definitions/StoryAPI"
                        }
                    },
                    "404": {
                        "description": "Story not found",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    },
                    "default": {
                        "description": "unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    }
                }
            }
        },
        "/story/user/{userId}": {
            "get": {
                "summary": "Obtain all stories of a user",
                "description": "Obtain all stories of a user\n### Example response\n```json\n{\n  \"data\": [{\n      \"type\": \"story\",\n      \"id\": \"84\",\n      \"attributes\": {\n          \"name\": null,\n          \"title\": \"Title\",\n          \"createdAt\": \"2016-08-01T09:02:07Z\",\n          \"visible\": false,\n          \"details\": null,\n          \"date\": \"2016-08-01T00:00:00Z\",\n          \"email\": \"vizz@vizzuality.com\",\n          \"location\": null,\n          \"userId\": \"573c9295aafb8d010001745b\",\n          \"media\": [],\n          \"lat\": -1.07437329723863,\n          \"lng\": 1.98413085937498\n      }\n  }]\n}\n```\n",
                "produces": [
                    "application/vnd.api+json"
                ],
                "tags": [
                    "STORY"
                ],
                "operationId": "getStoriesByUser",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "ID of user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "description": "Fields to serialize (sepparated by comma) of the story (?fields=name,title)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The all stories",
                        "schema": {
                            "$ref": "#/definitions/StoryAPI"
                        }
                    },
                    "400": {
                        "description": "Validate error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    },
                    "500": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Errors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Errors": {
            "type": "object",
            "description": "Errors",
            "properties": {
                "errors": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Error"
                    }
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int32",
                    "description": "A unique identifier for this particular occurrence of the problem."
                },
                "links": {
                    "type": "object",
                    "description": "A links object",
                    "properties": {
                        "about": {
                            "type": "string",
                            "description": "A link that leads to further details about this particular occurrence of the problem."
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "The HTTP status code applicable to this problem, expressed as a string value"
                },
                "code": {
                    "type": "string",
                    "description": "An application-specific error code, expressed as a string value"
                },
                "title": {
                    "type": "string",
                    "description": "A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
                },
                "detail": {
                    "type": "string",
                    "description": "A human-readable explanation specific to this occurrence of the problem. Like title, this field's value can be localized"
                },
                "source": {
                    "type": "object",
                    "description": "An object containing references to the source of the error, optionally including any of the following members",
                    "properties": {
                        "pointer": {
                            "type": "string",
                            "description": "A JSON Pointer [RFC6901] to the associated entity in the request document"
                        },
                        "parameter": {
                            "type": "string",
                            "description": "A string indicating which URI query parameter caused the error."
                        }
                    }
                },
                "meta": {
                    "type": "object",
                    "description": "A meta object containing non-standard meta-information about the error."
                }
            }
        },
        "StoryAPI": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Story"
                    }
                }
            }
        },
        "Story": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Resource type"
                },
                "id": {
                    "type": "string",
                    "description": "Resource id"
                },
                "attributes": {
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/StoryData"
                        }
                    }
                }
            }
        },
        "StoryData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                },
                "details": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "lat": {
                    "type": "number",
                    "format": "float"
                },
                "lng": {
                    "type": "number",
                    "format": "float"
                },
                "media": {
                    "type": "array",
                    "items": {
                        "properties": {
                            "url": {
                                "type": "string"
                            },
                            "embedUrl": {
                                "type": "string"
                            },
                            "previewUrl": {
                                "type": "string"
                            },
                            "mimeType": {
                                "type": "string"
                            },
                            "order": {
                                "type": "number",
                                "format": "integer"
                            }
                        }
                    }
                }
            }
        },
        "StoryCreate": {
            "type": "object",
            "properties": {
                "loggedUser": {
                    "type": "object",
                    "description": "Attribute seted by api-gateway when the user is logged",
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/LoggedUser"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "visible": {
                    "type": "boolean"
                },
                "details": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "lat": {
                    "type": "number",
                    "format": "float"
                },
                "lng": {
                    "type": "number",
                    "format": "float"
                },
                "media": {
                    "type": "array",
                    "items": {
                        "properties": {
                            "url": {
                                "type": "string"
                            },
                            "embedUrl": {
                                "type": "string"
                            },
                            "previewUrl": {
                                "type": "string"
                            },
                            "mimeType": {
                                "type": "string"
                            },
                            "order": {
                                "type": "number",
                                "format": "integer"
                            }
                        }
                    }
                },
                "geojson": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string"
                        },
                        "coordinates": {
                            "type": "array",
                            "items": {
                                "type": "number",
                                "format": "float"
                            }
                        }
                    }
                }
            }
        },
        "LoggedUser": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Resource type"
                },
                "id": {
                    "type": "string",
                    "description": "Resource id"
                },
                "attributes": {
                    "properties": {
                        "schema": {
                            "$ref": "#/definitions/UserData"
                        }
                    }
                }
            }
        },
        "UserData": {
            "type": "object",
            "properties": {
                "fullName": {
                    "type": "string"
                },
                "provider": {
                    "type": "string",
                    "description": "Provider of oauth"
                },
                "providerId": {
                    "type": "string",
                    "description": "Id of provider obtained in the authentication"
                },
                "email": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "sector": {
                    "type": "string"
                },
                "primaryResponsabilities": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "howDoYouUse": {
                    "type": "string"
                }
            }
        }
    }
}
